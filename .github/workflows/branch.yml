on:
  push:
    branches:
      - 'feature/**'
  workflow_dispatch:
  # schedule:
  #   - cron:  '30 5 * * *'
name: 'Feature (CI-Test) Build'

jobs:
  server:
    name: (CI-Test Only) Deploy App - Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
        python-version: ['3.11']
        poetry-version: ['1.5.1']
        os: [ubuntu-latest]
    environment: production
    outputs:
      target_bucket: ${{ steps.deploy_info.outputs.target_bucket }}
      build_date: ${{ steps.tag.outputs.date }}
      build_tag: ${{ steps.tag.outputs.build_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Run image
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Install Deps
        run: npm install -g aws-cdk && poetry install
        working-directory: infrastructure
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Get Build Tag
        id: tag
        run: |
          current=$(date +'%Y%m%d')
          current_tag=${GITHUB_REF##*/}-$current-${GITHUB_SHA::6}.${GITHUB_RUN_NUMBER}
          echo "date=$current" >> "$GITHUB_OUTPUT"
          echo "build_tag=$current_tag" >> "$GITHUB_OUTPUT"
      - name: Deploy
        id: deploy
        run: |
          source $(poetry env info --path)/bin/activate
          cdk deploy 'dev' --context deployment_path=`echo $DEPLOY_PATH` --require-approval never --outputs-file ./cdk-outputs.json
          cat cdk-outputs.json
          # cdk destroy 'dev' --require-approval never
        working-directory: infrastructure
        env:
          DEPLOY_PATH: ${{ steps.tag.outputs.build_tag }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: 'infrastructure/cdk-outputs.json'
          prefix: deploy
          masked: false
      - name: Show output
        id: deploy_info
        run: |
          data=${{ env.deploy_dev_DeployBucket }}
          echo "The bucket name was $data"
          echo "target_bucket=$data" >> "$GITHUB_OUTPUT"
  frontend:
    name: Deploy App - Frontend
    needs: server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: 'latest'
          extended: true
      - name: 'Build UI Assets'
        run: hugo --source ./resume-ui-simple --minify
      - name: 'Check UI Assets'
        run: |
          ls ./resume-ui-simple/public
      # - name: 'Remove Previous UI Assets'
      #   run: |
      #     aws s3 rm s3://$AWS_S3_BUCKET --recursive
      #   env:
      #     AWS_S3_BUCKET: '${{needs.server.outputs.target_bucket}}'
      - name: 'Deploy UI Assets'
        run: |
          aws s3 sync ./resume-ui-simple/public s3://$AWS_S3_BUCKET/$BUILD_LOCATION/
          ls resume-ui-simple/layouts/
          aws s3 sync . resume-ui-simple/layouts/maintenance.html s3://$AWS_S3_BUCKET/maintenance/ --exclude '*' --include 'maintenance.html'
        env:
          AWS_S3_BUCKET: '${{needs.server.outputs.target_bucket}}'
          BUILD_LOCATION: '${{needs.server.outputs.build_tag}}'
