plugins:
  - serverless-offline
# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.

service: resume-server
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

# Custom properties
# Behaviors for different environments.
custom:
  dev:
    Stack: ${env:DEV_USER, 'dev'}
    LogLevel: debug
    Name: ${env:DEV_USER, 'dev'}
    EnvironmentType: dev
  vars:
    c1env: ${env:DD_ENV_TAG, ${opt:stage, 'local-dev'}}
    env-name: ${self:custom.${self:provider.stage}.Name}
    shared-stack-name: ${self:custom.${self:provider.stage}.Stack}
    log-level: ${self:custom.${self:provider.stage}.LogLevel}
    EnvironmentType: ${self:custom.${self:provider.stage}.EnvironmentType}

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221
  iam:
    role: ServiceFunctionRole
  timeout: 10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region 'us-east-2'}

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  resume_server:
    handler: bin/server
    events:
      - httpApi:
          path: /resume
          method: get
          cors:
            origin: '*'
    environment:
      RESUME_DB_REGION: "us-east-2"
  # downloader:
  #   handler: bin/downloader
  #   events:
  #     - httpApi:
  #         path: /download
  #         method: get
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    ServiceFunctionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.${self:provider.stage}.Name}-LambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: ${self:custom.${self:provider.stage}.Name}-LambdaExecutionPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: 
                    - s3:*
                  Resource: "*"
                - Effect: Allow
                  Action: 
                    - dynamodb:*
                  Resource: "*"
                - Effect: Allow
                  Action: 
                    - cloudwatch:*
                    - logs:*
                  Resource: "*"